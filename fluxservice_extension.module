<?php
use Drupal\fluxservice_extension\FluxserviceQueuedTasks;

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_rules_category_info().
 */
function fluxservice_extension_rules_category_info() {
	$info =  array();
  // Use the same icon as for the service plugin.
	$info['fluxservice_extension'] = array(
		'label' => t('Fluxservice extension')
	);
	return $info;
}

/**
 * Implements hook_fluxservice_plugin_directory().
 */
function fluxservice_extension_fluxservice_plugin_directory() {
	return 'lib/Drupal/fluxservice_extension/Plugin';
}


/**
 * 
 */
function fluxservice_extension_task_type_get_options(){
	return FluxserviceQueuedTasks::getOptions();
}

/**
 * 
 */
function fluxservice_extension_task_priority_get_options(){
	return array(0,1,2,3,5);
}

/**
 * 
 */
function fluxservice_extension_change_type_get_options(){
	return array('create'=>'create','delete'=>'delete','update'=>'update');
}

/**
 * 
 */
function fluxservice_extension_service_account_get_options(){
	$infos=entity_get_info('fluxservice_account');
	$bundles=array();

	$res=db_select('fluxservice_account','fa')
				->fields('fa',array('id','plugin'))
				->groupBy('fa.plugin')
				->execute()
				->fetchAll();

	$existing_accounts=array();
	foreach ($res as $value) {
		$existing_accounts[$value->plugin]=$value->plugin;
	}

	foreach ($infos['bundles'] as $bundle => $info) {
		if(isset($existing_accounts[$bundle])){
			$bundles[$bundle]=$info['label'];
		}
	}

	return $bundles;
}

function fluxservice_remove_value($form){
	unset($form['#value']);
	return $form;
}

/**
 * 
 */
function rules_action_set_account_type_form_alter(&$form, &$form_state, $options, RulesAbstractPlugin $element){
	$first_step = empty($element->settings['bundle']);

	$form['reload'] = array(
	    '#weight' => 5,
	    '#type' => 'submit',
	    '#name' => 'reload',
	    '#value' => $first_step ? t('Continue') : t('Reload form'),
	    '#limit_validation_errors' => array(array('parameter', 'bundle')),
	    '#submit' => array('rules_action_type_form_submit_rebuild'),
	    '#ajax' => rules_ui_form_default_ajax(),
	);
	// Use ajax and trigger as the reload button.
	$form['parameter']['bundle']['settings']['bundle']['#ajax'] = $form['reload']['#ajax'] + array(
	    'event' => 'change',
	    'trigger_as' => array('name' => 'reload'),
	);

	if ($first_step) {
	    // In the first step show only the type select.
	    foreach (element_children($form['parameter']) as $key) {
	      if ($key != 'bundle') {
	        unset($form['parameter'][$key]);
	      }
	    }
	    unset($form['submit']);
	    unset($form['provides']);
	    // Disable #ajax for the first step as it has troubles with lazy-loaded JS.
	    // @todo: Re-enable once JS lazy-loading is fixed in core.
	    unset($form['parameter']['bundle']['settings']['bundle']['#ajax']);
	    unset($form['reload']['#ajax']);
	}
	else {
	    // Hide the reload button in case js is enabled and it's not the first step.
	    $form['reload']['#attributes'] = array('class' => array('rules-hide-js'));
	    $res=db_select('fluxservice_account','fa')
	    		->fields('fa',array('uuid','label'))
	    		->condition('fa.plugin', $element->settings['bundle'],'=')
	    		->execute()
	    		->fetchAll();
	    $accounts=array();
	    foreach ($res as $account) {
	    	$accounts[$account->uuid]=$account->label;
	    }
	    $form['parameter']['account']['settings']['account']['#options']=$accounts;
	}
}